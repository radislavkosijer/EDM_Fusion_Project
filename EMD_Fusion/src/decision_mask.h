/*
 * decision_mask.h
 *
 *  Created on: 14. feb 2025.
 *      Author: Radislav Kosijer
 *
 *  @brief Header file for calculating local variance and generating decision mask.
 */

#ifndef DECISION_MASK_H_
#define DECISION_MASK_H_

#include <stdint.h>

/** @brief Window size for variance calculation. */
#define WINDOW_SIZE 3

/**
 * @brief Calculate the local variance of an image using a sliding window.
 *
 * This function computes the local variance for each pixel of the input image (in Q16.16 format)
 * using a square window (e.g., 3x3).
 *
 * @param imf         Pointer to the input image.
 * @param width       Image width.
 * @param height      Image height.
 * @param variance_map Output array to store the computed variance.
 */
void calculate_local_variance(const int32_t* imf, int width, int height, int32_t* variance_map);


/**
 * @brief Generate a decision mask based on the variance maps of two images.
 *
 * The decision mask is generated by comparing the local variances of two images.
 *
 * @param var_map1  Variance map for the first image.
 * @param var_map2  Variance map for the second image.
 * @param width     Image width.
 * @param height    Image height.
 * @param alpha_mask Output array for the decision mask.
 */
void generate_decision_mask(const int32_t* var_map1, const int32_t* var_map2, int width, int height, char* alpha_mask);

#endif /* DECISION_MASK_H_ */
